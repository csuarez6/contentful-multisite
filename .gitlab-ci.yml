image: node:16

stages:
  - Test
  - Deploy
  - Stop

.only changes:
  only:
    changes: &changes
      - pages/**/*
      - src/**/*
      - styles/**/*
      - public/**/*
      - "*.json"
      - "*.js"
      - "*.ts"
      - "*.yaml"
      - .gitlab-ci.yml
      - .gitlab/**/*

Test_Linter:
  stage: Test

  before_script:
    - npm i -g pnpm
    - pnpm install
  script:
    - pnpm lint

  only:
    refs:
      - main
      - merge_requests
    changes: *changes
  except:
    - tags

Deploy_To_QA:
  stage: Deploy

  variables:
    PREVIEW_URL: $VERCEL_PROJECT_NAME-qa.vercel.app
    VERCEL_SCOPE: $VERCEL_SCOPE
    VERCEL_ORG_ID: $VERCEL_ORG_ID
    VERCEL_PROJECT_ID: $VERCEL_PROJECT_ID
    VERCEL_TOKEN: $VERCEL_TOKEN

  before_script:
    - npm i -g vercel
  script:
    - DEPLOYMENT_URL=$(VERCEL_ORG_ID=$VERCEL_ORG_ID VERCEL_PROJECT_ID=$VERCEL_PROJECT_ID vercel --yes --token $VERCEL_TOKEN --scope $VERCEL_SCOPE)
    - vercel alias set $DEPLOYMENT_URL $PREVIEW_URL -t $VERCEL_TOKEN --scope $VERCEL_SCOPE

  environment:
    name: review/QA
    url: https://$VERCEL_PROJECT_NAME-qa.vercel.app
    # on_stop: Stop_QA_Deployment

  when: manual
  only:
    refs:
      - merge_requests
    changes: *changes
  needs: ["Test_Linter"]

# Stop_QA_Deployment:
#   stage: Stop

#   variables:
#     PREVIEW_DEV_URL: $VERCEL_PROJECT_NAME-qa.$VERCEL_SCOPE.vercel.app
#     VERCEL_ORG_ID: $VERCEL_ORG_ID
#     VERCEL_PROJECT_ID: $VERCEL_PROJECT_ID
#     VERCEL_TOKEN: $VERCEL_TOKEN
#     VERCEL_SCOPE: $VERCEL_SCOPE

#   when: manual
#   environment:
#     name: review/QA
#     action: stop

#   before_script:
#     - npm i -g vercel
#   script:
#     - VERCEL_ORG_ID=$VERCEL_ORG_ID VERCEL_PROJECT_ID=$VERCEL_PROJECT_ID vercel remove $PREVIEW_DEV_URL --token $VERCEL_TOKEN --scope $VERCEL_SCOPE --yes

#   only:
#     refs:
#       - merge_requests
#     changes: *changes
#   except:
#     - main
#     - tags
#   needs: ["Deploy_To_QA"]

Deploy_Production_APP:
  stage: Deploy

  variables:
    VERCEL_SCOPE: $VERCEL_SCOPE
    VERCEL_ORG_ID: $VERCEL_ORG_ID
    VERCEL_PROJECT_ID: $VERCEL_PROJECT_ID
    VERCEL_TOKEN: $VERCEL_TOKEN

  before_script:
    - npm i -g vercel
  script:
    - VERCEL_ORG_ID=$VERCEL_ORG_ID VERCEL_PROJECT_ID=$VERCEL_PROJECT_ID vercel --prod --token $VERCEL_TOKEN --scope $VERCEL_SCOPE
  # after_script:
  #   - ./etc/slack/notificationStack.sh -v

  environment:
    name: Production
    url: https://vanti.aplyca.com

  when: on_success
  only:
    refs:
      - main
    changes: *changes
  except:
    - merge_requests
    - tags
  needs: ["Test_Linter"]

Delete_Preview_STORYBOOK:
  stage: Stop

  cache:
    key: 'sp-storybook'
    paths:
      - public

  script:
    - rm -rf "public/main"

  variables:
    GIT_STRATEGY: none # needed to prevent "Couldn't find remote ref" error
  environment:
    name: Storybook
    action: stop

  when: manual
  only:
    refs:
      - merge_requests
    changes: *changes
  except:
    - main
    - tags

pages:
  stage: Deploy

  variables:
    STORYBOOK_PREVIEW_URL: 'https://grupovanti.gitlab.io/Marketplace/web-commerce/main'

  cache:
    key: 'sp-storybook'
    paths:
      - public
  artifacts:
    paths:
      - public

  before_script: 
    - npm i -g pnpm
    - pnpm install
    - pnpm build-storybook
  script:
    - rm -rf "public/main"
    - mkdir -p "public/main"
    - echo "<!DOCTYPE html><script>window.location.href = '$STORYBOOK_PREVIEW_URL';</script>" > public/index.html
    - mv storybook-static/* "public/main/"
    - rm -rf "public/main/main"

  environment:
    name: Storybook
    url: https://grupovanti.gitlab.io/Marketplace/web-commerce/main/
    on_stop: Delete_Preview_STORYBOOK

  when: manual
  only:
    refs:
      - main
      - merge_requests
    changes: *changes
  except:
    - tags
  needs: ["Test_Linter"]
